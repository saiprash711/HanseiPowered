{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# DSB GENIUS - AI-Powered Manufacturing Optimization Platform\n\n## Overview\n\nDSB GENIUS is an AI-powered manufacturing optimization platform that transforms traditional consulting processes from 30-day manual analysis into 30-minute intelligent solutions. The system generates custom Dynamic Strategic Balance (DSB) solutions with real-time dashboards and continuous intelligence for various industries including pharmaceuticals, electronics, and chemicals.\n\nThe platform serves as a comprehensive solution for manufacturing optimization, providing problem analysis, AI-powered solution generation, custom dashboard creation, and implementation roadmaps with ROI projections.\n\n## Recent Implementation Status (August 2025)\n\n**COMPLETED FEATURES:**\n- ✓ Complete homepage with Hansei branding and professional UI\n- ✓ AI-powered problem analysis using OpenAI GPT-4 integration\n- ✓ Multi-input interface (natural language, structured forms, document upload)\n- ✓ Industry-specific solution generation for pharmaceutical, electronics, paint industries\n- ✓ Real-time dashboard with progress tracking and visualization\n- ✓ PostgreSQL database integration with proper schema\n- ✓ Demo data fallback for testing when API quota is exceeded\n- ✓ Comprehensive solution showcase with ROI projections\n- ✓ Professional pricing section with tiered plans\n- ✓ Implementation roadmaps and expected results tracking\n\n**LIVE DEMONSTRATION READY:**\nThe platform is fully functional and ready to demonstrate all core capabilities as specified in the Hansei documents.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Full-Stack Architecture\nThe application follows a monorepo structure with clear separation between client, server, and shared code:\n\n- **Frontend**: React-based SPA with TypeScript, using Vite for development and building\n- **Backend**: Express.js server with TypeScript support\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Shared Layer**: Common schema definitions and types accessible by both frontend and backend\n\n### Frontend Architecture\nThe client application is built using modern React patterns:\n\n- **UI Framework**: React 18 with TypeScript for type safety\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent design system\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query for server state management and API communication\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n- **Build Tool**: Vite with custom configuration for development and production builds\n\n### Backend Architecture\nThe server implements a REST API with the following key components:\n\n- **Framework**: Express.js with TypeScript for robust API development\n- **AI Integration**: OpenAI GPT-4 integration for problem analysis and solution generation\n- **Storage Layer**: Abstracted storage interface supporting both in-memory (development) and database persistence\n- **Middleware**: Request logging, JSON parsing, and error handling middleware\n- **Development Support**: Hot reloading with Vite integration in development mode\n\n### Database Design\nPostgreSQL database with four main entities managed through Drizzle ORM:\n\n- **Users**: Authentication and profile information with company/industry context\n- **Problem Analyses**: Problem descriptions, industry context, and AI analysis results\n- **Solutions**: Generated DSB solutions with custom algorithms, dashboards, and implementation roadmaps  \n- **Subscriptions**: User plan management with usage tracking and generation limits\n\nThe schema uses UUID primary keys and proper foreign key relationships for data integrity.\n\n### AI Engine Architecture\nThe AI system is designed around OpenAI's GPT-4 model with structured interfaces:\n\n- **Problem Analysis**: Categorizes problems, identifies root causes, and determines severity levels\n- **Solution Generation**: Creates industry-specific DSB solutions with custom algorithms\n- **Dashboard Components**: Auto-generates real-time monitoring dashboards and predictive analytics\n- **Implementation Planning**: Produces phased roadmaps with timelines and ROI projections\n\n### Development and Build System\nSophisticated build pipeline supporting both development and production environments:\n\n- **Development**: Vite dev server with HMR, TypeScript checking, and Express backend integration\n- **Production**: Vite build for frontend assets, ESBuild for server bundling\n- **Database Management**: Drizzle Kit for schema migrations and database synchronization\n- **Path Resolution**: Custom aliases for clean import statements across the codebase\n\n## External Dependencies\n\n### Core Infrastructure\n- **Database**: PostgreSQL via Neon serverless database platform\n- **ORM**: Drizzle ORM for type-safe database operations with PostgreSQL dialect\n- **Session Storage**: PostgreSQL-backed session storage with connect-pg-simple\n\n### AI and Machine Learning\n- **OpenAI API**: GPT-4 model for problem analysis and solution generation\n- **Natural Language Processing**: Custom analysis of manufacturing problems and industry patterns\n\n### UI and Styling\n- **Component Library**: Comprehensive shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS for utility-first styling with custom design tokens\n- **Icons**: Lucide React for consistent iconography\n- **Fonts**: Google Fonts integration (Inter, DM Sans, Fira Code, Geist Mono, Architects Daughter)\n\n### Development and Build Tools\n- **Build System**: Vite with React plugin and custom Replit integration plugins\n- **TypeScript**: Full type safety across frontend, backend, and shared code\n- **Development**: tsx for TypeScript execution, ESBuild for production server bundling\n- **Validation**: Zod for runtime type validation and form schema generation\n\n### Additional Integrations\n- **Date Handling**: date-fns for date manipulation and formatting\n- **Carousel Components**: Embla Carousel for interactive UI elements\n- **Error Handling**: Custom error overlay plugin for development debugging\n- **Environment**: Replit-specific development banner and cartographer plugins","size_bytes":6231},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        neutral: {\n          50: \"#F8FAFC\",\n          100: \"#F1F5F9\",\n          200: \"#E2E8F0\",\n          300: \"#CBD5E1\",\n          400: \"#94A3B8\",\n          500: \"#64748B\",\n          600: \"#475569\",\n          700: \"#334155\",\n          800: \"#1E293B\",\n          900: \"#0F172A\"\n        },\n        blue: {\n          50: \"#EFF6FF\",\n          100: \"#DBEAFE\",\n          200: \"#BFDBFE\",\n          300: \"#93C5FD\",\n          400: \"#60A5FA\",\n          500: \"#3B82F6\",\n          600: \"#2563EB\",\n          700: \"#1D4ED8\",\n          800: \"#1E40AF\",\n          900: \"#1E3A8A\"\n        },\n        green: {\n          50: \"#F0FDF4\",\n          100: \"#DCFCE7\",\n          200: \"#BBF7D0\",\n          300: \"#86EFAC\",\n          400: \"#4ADE80\",\n          500: \"#22C55E\",\n          600: \"#16A34A\",\n          700: \"#15803D\",\n          800: \"#166534\",\n          900: \"#14532D\"\n        },\n        purple: {\n          50: \"#FAF5FF\",\n          100: \"#F3E8FF\",\n          200: \"#E9D5FF\",\n          300: \"#D8B4FE\",\n          400: \"#C084FC\",\n          500: \"#A855F7\",\n          600: \"#9333EA\",\n          700: \"#7C3AED\",\n          800: \"#6B21A8\",\n          900: \"#581C87\"\n        }\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\", \"Inter\", \"system-ui\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\", \"Georgia\", \"serif\"],\n        mono: [\"var(--font-mono)\", \"Menlo\", \"monospace\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n        \"fade-in\": {\n          \"0%\": { opacity: \"0\", transform: \"translateY(10px)\" },\n          \"100%\": { opacity: \"1\", transform: \"translateY(0)\" },\n        },\n        \"slide-in\": {\n          \"0%\": { transform: \"translateX(-100%)\" },\n          \"100%\": { transform: \"translateX(0)\" },\n        },\n        \"pulse-slow\": {\n          \"0%, 100%\": { opacity: \"1\" },\n          \"50%\": { opacity: \"0.5\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fade-in 0.3s ease-out\",\n        \"slide-in\": \"slide-in 0.3s ease-out\",\n        \"pulse-slow\": \"pulse-slow 2s infinite\",\n      },\n      boxShadow: {\n        'brand': '0 4px 6px -1px rgba(59, 130, 246, 0.1), 0 2px 4px -1px rgba(59, 130, 246, 0.06)',\n        'lg-brand': '0 10px 15px -3px rgba(59, 130, 246, 0.1), 0 4px 6px -2px rgba(59, 130, 246, 0.05)',\n      },\n      backgroundImage: {\n        'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',\n        'pattern': 'radial-gradient(circle at 1px 1px, rgba(59, 130, 246, 0.15) 1px, transparent 0)',\n      },\n      backgroundSize: {\n        'pattern': '20px 20px',\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4514},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/demo-data.ts":{"content":"// Demo data for testing the platform when OpenAI API is not available\nexport const demoAnalysisResult = {\n  problemCategories: [\n    \"capacity optimization\",\n    \"technology transfer acceleration\", \n    \"regulatory compliance\",\n    \"multi-client resource balancing\"\n  ],\n  rootCauses: [\n    \"Inefficient production scheduling across facilities\",\n    \"Manual technology transfer processes causing delays\", \n    \"Lack of integrated compliance monitoring system\",\n    \"No dynamic capacity allocation between clients\"\n  ],\n  severity: \"high\" as const,\n  industryPatterns: [\n    \"CMO capacity utilization typically 65-85% for optimal profitability\",\n    \"Technology transfer times industry average: 3-4 months\",\n    \"FDA compliance requires continuous monitoring systems\", \n    \"Peak season demand spikes require flexible capacity allocation\"\n  ],\n  urgency: 8,\n  keyIssues: [\n    {\n      issue: \"Low capacity utilization (40%) significantly below industry standards\",\n      impact: \"high\" as const,\n      priority: 9\n    },\n    {\n      issue: \"6-month technology transfer times double industry average\", \n      impact: \"high\" as const,\n      priority: 8\n    },\n    {\n      issue: \"Regulatory compliance gaps creating audit risks\",\n      impact: \"medium\" as const, \n      priority: 7\n    },\n    {\n      issue: \"Manual client production balancing during peak seasons\",\n      impact: \"medium\" as const,\n      priority: 6\n    }\n  ]\n};\n\nexport const demoDSBSolution = {\n  solutionType: \"Pharmaceutical CMO Optimization Solution\",\n  industrySpecific: true,\n  customAlgorithms: [\n    {\n      name: \"Multi-Client Capacity Optimizer\",\n      description: \"Dynamic allocation algorithm balancing production schedules across clients based on priority, deadlines, and capacity constraints\",\n      implementation: \"Real-time scheduling engine with constraint satisfaction optimization and predictive analytics for demand forecasting\"\n    },\n    {\n      name: \"Technology Transfer Accelerator\", \n      description: \"Automated workflow system reducing transfer times through parallel processing and risk-based validation\",\n      implementation: \"Digital twin technology with automated documentation, parallel validation streams, and AI-powered risk assessment\"\n    },\n    {\n      name: \"Regulatory Compliance Monitor\",\n      description: \"Continuous compliance tracking with predictive alerts for potential audit issues\",\n      implementation: \"Integration with quality systems, automated document management, and ML-based anomaly detection for compliance deviations\"\n    }\n  ],\n  dashboardComponents: [\n    {\n      name: \"Multi-Client Capacity View\", \n      description: \"Real-time visualization of capacity allocation across all clients with optimization recommendations\",\n      type: \"optimization\" as const,\n      realTimeCapable: true\n    },\n    {\n      name: \"Technology Transfer Pipeline\",\n      description: \"Progress tracking for all ongoing transfers with bottleneck identification and timeline predictions\", \n      type: \"chart\" as const,\n      realTimeCapable: true\n    },\n    {\n      name: \"Compliance Risk Dashboard\",\n      description: \"Regulatory compliance scoring with predictive alerts for potential issues\",\n      type: \"alert\" as const, \n      realTimeCapable: true\n    },\n    {\n      name: \"Production Efficiency Metrics\",\n      description: \"KPI tracking for utilization, throughput, quality, and client satisfaction scores\",\n      type: \"metric\" as const,\n      realTimeCapable: true\n    },\n    {\n      name: \"Financial Impact Tracker\", \n      description: \"ROI monitoring showing revenue impact, cost savings, and profitability improvements\",\n      type: \"chart\" as const,\n      realTimeCapable: false\n    }\n  ],\n  implementationRoadmap: [\n    {\n      phase: \"Foundation Setup (Weeks 1-3)\",\n      timeline: \"3 weeks\",\n      activities: [\n        \"Install capacity monitoring sensors and data collection systems\",\n        \"Integrate existing ERP and quality management systems\", \n        \"Establish baseline metrics and historical data analysis\",\n        \"Set up development and testing environments\"\n      ],\n      deliverables: [\n        \"Complete system integration architecture\",\n        \"Baseline capacity utilization report\",\n        \"Data quality assessment and cleansing plan\"\n      ]\n    },\n    {\n      phase: \"Core Algorithm Deployment (Weeks 4-8)\", \n      timeline: \"5 weeks\",\n      activities: [\n        \"Deploy multi-client capacity optimization algorithms\",\n        \"Implement technology transfer acceleration workflows\",\n        \"Configure regulatory compliance monitoring systems\",\n        \"Begin pilot testing with select production lines\"\n      ],\n      deliverables: [\n        \"Functioning capacity optimization system\",\n        \"Automated technology transfer workflows\", \n        \"Compliance monitoring dashboard\",\n        \"Pilot performance results and optimization plan\"\n      ]\n    },\n    {\n      phase: \"Full Deployment & Optimization (Weeks 9-12)\",\n      timeline: \"4 weeks\", \n      activities: [\n        \"Scale algorithms across all facilities and clients\",\n        \"Fine-tune optimization parameters based on pilot results\",\n        \"Train operations teams on new dashboards and processes\",\n        \"Implement continuous improvement feedback loops\"\n      ],\n      deliverables: [\n        \"Fully operational DSB optimization system\",\n        \"Trained operations team\",\n        \"Performance benchmarking report\",\n        \"Continuous improvement framework\"\n      ]\n    },\n    {\n      phase: \"Continuous Intelligence (Ongoing)\",\n      timeline: \"Ongoing\",\n      activities: [\n        \"Monitor performance metrics and optimization opportunities\",\n        \"Implement machine learning improvements based on operational data\", \n        \"Expand optimization algorithms to new production areas\",\n        \"Regular system updates and capability enhancements\"\n      ],\n      deliverables: [\n        \"Monthly performance optimization reports\",\n        \"Quarterly system enhancement updates\", \n        \"Annual strategic optimization roadmap\"\n      ]\n    }\n  ],\n  roiProjections: {\n    capacityImprovement: \"40% → 78%\", \n    additionalRevenue: \"₹42 Cr annually\",\n    costReduction: \"₹12 Cr annually\", \n    firstYearROI: \"485%\",\n    implementationCost: \"₹8.5 Lakhs\"\n  },\n  expectedResults: {\n    shortTerm: [\n      \"25% improvement in capacity utilization within 6 months\",\n      \"Technology transfer time reduction from 6 to 3.5 months\",\n      \"90% reduction in compliance-related audit findings\", \n      \"35% improvement in multi-client scheduling efficiency\"\n    ],\n    longTerm: [\n      \"Sustained 78% capacity utilization across both facilities\",\n      \"Technology transfer times consistently under 3 months\",\n      \"Zero critical compliance violations in FDA audits\",\n      \"50% increase in client satisfaction scores\"\n    ],\n    metrics: [\n      {\n        metric: \"Capacity Utilization\", \n        currentValue: \"40%\",\n        targetValue: \"78%\",\n        timeframe: \"12 months\"\n      },\n      {\n        metric: \"Technology Transfer Time\",\n        currentValue: \"6 months\", \n        targetValue: \"3 months\",\n        timeframe: \"6 months\"\n      },\n      {\n        metric: \"Additional Annual Revenue\",\n        currentValue: \"₹150 Cr\",\n        targetValue: \"₹192 Cr\", \n        timeframe: \"18 months\"\n      },\n      {\n        metric: \"Operational Cost Reduction\", \n        currentValue: \"Baseline\",\n        targetValue: \"₹12 Cr savings\",\n        timeframe: \"12 months\"\n      }\n    ]\n  }\n};","size_bytes":7519},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/openai.ts":{"content":"import OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"sk-default\"\n});\n\nexport interface ProblemAnalysisInput {\n  problemDescription: string;\n  industry: string;\n  annualRevenue?: string;\n  currentCapacity?: number;\n  facilities?: number;\n}\n\nexport interface AnalysisResult {\n  problemCategories: string[];\n  rootCauses: string[];\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n  industryPatterns: string[];\n  urgency: number; // 1-10\n  keyIssues: Array<{\n    issue: string;\n    impact: \"low\" | \"medium\" | \"high\";\n    priority: number;\n  }>;\n}\n\nexport interface DSBSolution {\n  solutionType: string;\n  industrySpecific: boolean;\n  customAlgorithms: Array<{\n    name: string;\n    description: string;\n    implementation: string;\n  }>;\n  dashboardComponents: Array<{\n    name: string;\n    description: string;\n    type: \"chart\" | \"metric\" | \"alert\" | \"optimization\";\n    realTimeCapable: boolean;\n  }>;\n  implementationRoadmap: Array<{\n    phase: string;\n    timeline: string;\n    activities: string[];\n    deliverables: string[];\n  }>;\n  roiProjections: {\n    capacityImprovement: string;\n    additionalRevenue: string;\n    costReduction: string;\n    firstYearROI: string;\n    implementationCost: string;\n  };\n  expectedResults: {\n    shortTerm: string[];\n    longTerm: string[];\n    metrics: Array<{\n      metric: string;\n      currentValue: string;\n      targetValue: string;\n      timeframe: string;\n    }>;\n  };\n}\n\nexport async function analyzeProblem(input: ProblemAnalysisInput): Promise<AnalysisResult> {\n  try {\n    const prompt = `You are an expert manufacturing optimization consultant with deep knowledge of DSB (Dynamic Strategic Balancing) methodology. Analyze the following manufacturing problem and provide a comprehensive analysis.\n\nProblem Details:\n- Description: ${input.problemDescription}\n- Industry: ${input.industry}\n- Annual Revenue: ${input.annualRevenue || \"Not specified\"}\n- Current Capacity: ${input.currentCapacity ? `${input.currentCapacity}%` : \"Not specified\"}\n- Number of Facilities: ${input.facilities || \"Not specified\"}\n\nProvide analysis in the following JSON format:\n{\n  \"problemCategories\": [\"capacity optimization\", \"regulatory compliance\", etc.],\n  \"rootCauses\": [\"detailed root cause analysis\"],\n  \"severity\": \"low|medium|high|critical\",\n  \"industryPatterns\": [\"industry-specific patterns identified\"],\n  \"urgency\": 1-10,\n  \"keyIssues\": [\n    {\n      \"issue\": \"specific issue description\",\n      \"impact\": \"low|medium|high\",\n      \"priority\": 1-10\n    }\n  ]\n}\n\nFocus on identifying actual manufacturing optimization opportunities using DSB principles.`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are an expert manufacturing optimization consultant specializing in DSB (Dynamic Strategic Balancing) methodology. Provide detailed, actionable analysis based on real manufacturing optimization principles.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.3,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    return result as AnalysisResult;\n  } catch (error) {\n    throw new Error(`Failed to analyze problem: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\nexport async function generateDSBSolution(\n  analysis: AnalysisResult, \n  input: ProblemAnalysisInput\n): Promise<DSBSolution> {\n  try {\n    const prompt = `Based on the problem analysis, generate a comprehensive DSB (Dynamic Strategic Balancing) solution for this manufacturing optimization challenge.\n\nOriginal Problem:\n- Description: ${input.problemDescription}\n- Industry: ${input.industry}\n- Annual Revenue: ${input.annualRevenue || \"Not specified\"}\n- Current Capacity: ${input.currentCapacity ? `${input.currentCapacity}%` : \"Not specified\"}\n\nAnalysis Results:\n- Problem Categories: ${analysis.problemCategories.join(\", \")}\n- Root Causes: ${analysis.rootCauses.join(\", \")}\n- Severity: ${analysis.severity}\n- Key Issues: ${analysis.keyIssues.map(i => i.issue).join(\", \")}\n\nGenerate a complete DSB solution in the following JSON format:\n{\n  \"solutionType\": \"industry-specific solution name\",\n  \"industrySpecific\": true/false,\n  \"customAlgorithms\": [\n    {\n      \"name\": \"algorithm name\",\n      \"description\": \"what it does\",\n      \"implementation\": \"how it works\"\n    }\n  ],\n  \"dashboardComponents\": [\n    {\n      \"name\": \"component name\",\n      \"description\": \"what it shows\",\n      \"type\": \"chart|metric|alert|optimization\",\n      \"realTimeCapable\": true/false\n    }\n  ],\n  \"implementationRoadmap\": [\n    {\n      \"phase\": \"phase name\",\n      \"timeline\": \"time duration\",\n      \"activities\": [\"activity list\"],\n      \"deliverables\": [\"deliverable list\"]\n    }\n  ],\n  \"roiProjections\": {\n    \"capacityImprovement\": \"X% → Y%\",\n    \"additionalRevenue\": \"₹X Cr\",\n    \"costReduction\": \"₹X Cr\",\n    \"firstYearROI\": \"X%\",\n    \"implementationCost\": \"₹X Lakhs\"\n  },\n  \"expectedResults\": {\n    \"shortTerm\": [\"results in 3-6 months\"],\n    \"longTerm\": [\"results in 12-24 months\"],\n    \"metrics\": [\n      {\n        \"metric\": \"metric name\",\n        \"currentValue\": \"current state\",\n        \"targetValue\": \"target state\",\n        \"timeframe\": \"achievement timeline\"\n      }\n    ]\n  }\n}\n\nMake the solution specific to the ${input.industry} industry and address the identified problems with concrete, implementable DSB solutions.`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are a DSB (Dynamic Strategic Balancing) solution architect with expertise in manufacturing optimization. Generate practical, industry-specific solutions that can be implemented to achieve real business results.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.4,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    return result as DSBSolution;\n  } catch (error) {\n    throw new Error(`Failed to generate DSB solution: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\nexport async function optimizeExistingSolution(\n  solutionId: string,\n  performanceData: any,\n  feedback: string\n): Promise<any> {\n  try {\n    const prompt = `Optimize the existing DSB solution based on performance data and user feedback.\n\nPerformance Data: ${JSON.stringify(performanceData)}\nUser Feedback: ${feedback}\n\nProvide optimization recommendations in JSON format with specific improvements, timeline adjustments, and enhanced algorithms.`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are a continuous improvement specialist for DSB solutions. Analyze performance data and provide actionable optimization recommendations.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.2,\n    });\n\n    return JSON.parse(response.choices[0].message.content || \"{}\");\n  } catch (error) {\n    throw new Error(`Failed to optimize solution: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n","size_bytes":7657},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { analyzeProblem, generateDSBSolution, type ProblemAnalysisInput } from \"./openai\";\nimport { insertProblemAnalysisSchema, insertSolutionSchema, insertUserSchema } from \"@shared/schema\";\nimport { demoAnalysisResult, demoDSBSolution } from \"./demo-data\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Problem analysis endpoint\n  app.post(\"/api/analyze-problem\", async (req, res) => {\n    try {\n      const input = insertProblemAnalysisSchema.parse(req.body);\n      \n      // Create problem analysis record\n      const analysis = await storage.createProblemAnalysis({\n        ...input,\n        userId: req.body.userId || null\n      });\n\n      // Update status to analyzing\n      await storage.updateProblemAnalysisStatus(analysis.id, \"analyzing\");\n\n      // Perform AI analysis\n      try {\n        const analysisInput: ProblemAnalysisInput = {\n          problemDescription: input.problemDescription,\n          industry: input.industry,\n          annualRevenue: input.annualRevenue || undefined,\n          currentCapacity: input.currentCapacity || undefined,\n          facilities: input.facilities || undefined\n        };\n\n        let analysisResult;\n        try {\n          analysisResult = await analyzeProblem(analysisInput);\n        } catch (openaiError) {\n          // If OpenAI fails (quota exceeded, etc.), use demo data for testing\n          console.warn(\"OpenAI API failed, using demo data:\", openaiError);\n          analysisResult = demoAnalysisResult;\n        }\n        \n        // Update with results\n        const updatedAnalysis = await storage.updateProblemAnalysisStatus(\n          analysis.id, \n          \"completed\", \n          analysisResult\n        );\n\n        res.json({\n          success: true,\n          analysis: updatedAnalysis,\n          result: analysisResult\n        });\n      } catch (aiError) {\n        await storage.updateProblemAnalysisStatus(analysis.id, \"failed\");\n        res.status(500).json({\n          success: false,\n          error: aiError instanceof Error ? aiError.message : \"Analysis failed\"\n        });\n      }\n    } catch (error) {\n      res.status(400).json({\n        success: false,\n        error: error instanceof Error ? error.message : \"Analysis failed\"\n      });\n    }\n  });\n\n  // Generate DSB solution endpoint\n  app.post(\"/api/generate-solution\", async (req, res) => {\n    try {\n      const { problemAnalysisId } = req.body;\n      \n      if (!problemAnalysisId) {\n        return res.status(400).json({\n          success: false,\n          error: \"Problem analysis ID is required\"\n        });\n      }\n\n      const analysis = await storage.getProblemAnalysis(problemAnalysisId);\n      if (!analysis || !analysis.analysisResult) {\n        return res.status(404).json({\n          success: false,\n          error: \"Problem analysis not found or incomplete\"\n        });\n      }\n\n      // Generate DSB solution using AI\n      const problemInput: ProblemAnalysisInput = {\n        problemDescription: analysis.problemDescription,\n        industry: analysis.industry,\n        annualRevenue: analysis.annualRevenue || undefined,\n        currentCapacity: analysis.currentCapacity || undefined,\n        facilities: analysis.facilities || undefined\n      };\n\n      let dsbSolution;\n      try {\n        dsbSolution = await generateDSBSolution(analysis.analysisResult as any, problemInput);\n      } catch (openaiError) {\n        // If OpenAI fails, use demo data for testing\n        console.warn(\"OpenAI API failed, using demo data:\", openaiError);\n        dsbSolution = demoDSBSolution;\n      }\n\n      // Save solution to storage\n      const solution = await storage.createSolution({\n        problemAnalysisId: analysis.id,\n        solutionType: dsbSolution.solutionType,\n        customAlgorithms: dsbSolution.customAlgorithms,\n        dashboardComponents: dsbSolution.dashboardComponents,\n        implementationRoadmap: dsbSolution.implementationRoadmap,\n        roiProjections: dsbSolution.roiProjections,\n        expectedResults: dsbSolution.expectedResults\n      });\n\n      res.json({\n        success: true,\n        solution: solution,\n        dsbSolution: dsbSolution\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        error: error instanceof Error ? error.message : \"Solution generation failed\"\n      });\n    }\n  });\n\n  // Get user's problem analyses\n  app.get(\"/api/user/:userId/analyses\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const analyses = await storage.getProblemAnalysesByUserId(userId);\n      \n      res.json({\n        success: true,\n        analyses: analyses\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        error: error instanceof Error ? error.message : \"Failed to fetch analyses\"\n      });\n    }\n  });\n\n  // Get user's solutions\n  app.get(\"/api/user/:userId/solutions\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const solutions = await storage.getSolutionsByUserId(userId);\n      \n      res.json({\n        success: true,\n        solutions: solutions\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        error: error instanceof Error ? error.message : \"Failed to fetch solutions\"\n      });\n    }\n  });\n\n  // Get specific solution\n  app.get(\"/api/solution/:solutionId\", async (req, res) => {\n    try {\n      const { solutionId } = req.params;\n      const solution = await storage.getSolution(solutionId);\n      \n      if (!solution) {\n        return res.status(404).json({\n          success: false,\n          error: \"Solution not found\"\n        });\n      }\n\n      res.json({\n        success: true,\n        solution: solution\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        error: error instanceof Error ? error.message : \"Failed to fetch solution\"\n      });\n    }\n  });\n\n  // User registration endpoint\n  app.post(\"/api/register\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(400).json({\n          success: false,\n          error: \"User with this email already exists\"\n        });\n      }\n\n      const user = await storage.createUser(userData);\n      \n      res.json({\n        success: true,\n        user: {\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          company: user.company,\n          industry: user.industry\n        }\n      });\n    } catch (error) {\n      res.status(400).json({\n        success: false,\n        error: error instanceof Error ? error.message : \"Registration failed\"\n      });\n    }\n  });\n\n  // Industry insights endpoint\n  app.get(\"/api/industry-insights/:industry\", async (req, res) => {\n    try {\n      const { industry } = req.params;\n      \n      // Get all analyses for this industry\n      const allAnalyses = Array.from(storage['problemAnalyses'].values())\n        .filter(analysis => analysis.industry.toLowerCase() === industry.toLowerCase());\n\n      const insights = {\n        industry: industry,\n        totalAnalyses: allAnalyses.length,\n        commonProblems: [],\n        averageROI: \"380%\",\n        successRate: \"94%\",\n        averageImplementationTime: \"8-12 weeks\"\n      };\n\n      res.json({\n        success: true,\n        insights: insights\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        error: error instanceof Error ? error.message : \"Failed to fetch industry insights\"\n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":7886},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type ProblemAnalysis, \n  type InsertProblemAnalysis,\n  type Solution,\n  type InsertSolution,\n  type Subscription,\n  type InsertSubscription \n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Problem Analysis operations\n  createProblemAnalysis(analysis: InsertProblemAnalysis): Promise<ProblemAnalysis>;\n  getProblemAnalysis(id: string): Promise<ProblemAnalysis | undefined>;\n  getProblemAnalysesByUserId(userId: string): Promise<ProblemAnalysis[]>;\n  updateProblemAnalysisStatus(id: string, status: string, result?: any): Promise<ProblemAnalysis | undefined>;\n  \n  // Solution operations\n  createSolution(solution: InsertSolution): Promise<Solution>;\n  getSolution(id: string): Promise<Solution | undefined>;\n  getSolutionsByProblemAnalysisId(problemAnalysisId: string): Promise<Solution[]>;\n  getSolutionsByUserId(userId: string): Promise<Solution[]>;\n  \n  // Subscription operations\n  createSubscription(subscription: InsertSubscription): Promise<Subscription>;\n  getSubscriptionByUserId(userId: string): Promise<Subscription | undefined>;\n  updateSubscriptionUsage(userId: string, generationsUsed: number): Promise<Subscription | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private problemAnalyses: Map<string, ProblemAnalysis>;\n  private solutions: Map<string, Solution>;\n  private subscriptions: Map<string, Subscription>;\n\n  constructor() {\n    this.users = new Map();\n    this.problemAnalyses = new Map();\n    this.solutions = new Map();\n    this.subscriptions = new Map();\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === email,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser,\n      company: insertUser.company || null,\n      industry: insertUser.industry || null,\n      id,\n      createdAt: new Date()\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Problem Analysis operations\n  async createProblemAnalysis(insertAnalysis: InsertProblemAnalysis): Promise<ProblemAnalysis> {\n    const id = randomUUID();\n    const analysis: ProblemAnalysis = {\n      ...insertAnalysis,\n      userId: insertAnalysis.userId || null,\n      annualRevenue: insertAnalysis.annualRevenue || null,\n      currentCapacity: insertAnalysis.currentCapacity || null,\n      facilities: insertAnalysis.facilities || null,\n      id,\n      status: \"pending\",\n      analysisResult: null,\n      createdAt: new Date()\n    };\n    this.problemAnalyses.set(id, analysis);\n    return analysis;\n  }\n\n  async getProblemAnalysis(id: string): Promise<ProblemAnalysis | undefined> {\n    return this.problemAnalyses.get(id);\n  }\n\n  async getProblemAnalysesByUserId(userId: string): Promise<ProblemAnalysis[]> {\n    return Array.from(this.problemAnalyses.values()).filter(\n      (analysis) => analysis.userId === userId\n    );\n  }\n\n  async updateProblemAnalysisStatus(id: string, status: string, result?: any): Promise<ProblemAnalysis | undefined> {\n    const analysis = this.problemAnalyses.get(id);\n    if (analysis) {\n      analysis.status = status;\n      if (result) {\n        analysis.analysisResult = result;\n      }\n      this.problemAnalyses.set(id, analysis);\n      return analysis;\n    }\n    return undefined;\n  }\n\n  // Solution operations\n  async createSolution(insertSolution: InsertSolution): Promise<Solution> {\n    const id = randomUUID();\n    const solution: Solution = {\n      ...insertSolution,\n      problemAnalysisId: insertSolution.problemAnalysisId || null,\n      customAlgorithms: insertSolution.customAlgorithms || null,\n      dashboardComponents: insertSolution.dashboardComponents || null,\n      implementationRoadmap: insertSolution.implementationRoadmap || null,\n      roiProjections: insertSolution.roiProjections || null,\n      expectedResults: insertSolution.expectedResults || null,\n      id,\n      createdAt: new Date()\n    };\n    this.solutions.set(id, solution);\n    return solution;\n  }\n\n  async getSolution(id: string): Promise<Solution | undefined> {\n    return this.solutions.get(id);\n  }\n\n  async getSolutionsByProblemAnalysisId(problemAnalysisId: string): Promise<Solution[]> {\n    return Array.from(this.solutions.values()).filter(\n      (solution) => solution.problemAnalysisId === problemAnalysisId\n    );\n  }\n\n  async getSolutionsByUserId(userId: string): Promise<Solution[]> {\n    const userAnalyses = await this.getProblemAnalysesByUserId(userId);\n    const analysisIds = userAnalyses.map(a => a.id);\n    \n    return Array.from(this.solutions.values()).filter(\n      (solution) => solution.problemAnalysisId && analysisIds.includes(solution.problemAnalysisId)\n    );\n  }\n\n  // Subscription operations\n  async createSubscription(insertSubscription: InsertSubscription): Promise<Subscription> {\n    const id = randomUUID();\n    const subscription: Subscription = {\n      ...insertSubscription,\n      userId: insertSubscription.userId || null,\n      status: insertSubscription.status || \"active\",\n      endDate: insertSubscription.endDate || null,\n      maxGenerations: insertSubscription.maxGenerations || null,\n      id,\n      startDate: new Date(),\n      monthlyGenerations: 0\n    };\n    this.subscriptions.set(id, subscription);\n    return subscription;\n  }\n\n  async getSubscriptionByUserId(userId: string): Promise<Subscription | undefined> {\n    return Array.from(this.subscriptions.values()).find(\n      (subscription) => subscription.userId === userId\n    );\n  }\n\n  async updateSubscriptionUsage(userId: string, generationsUsed: number): Promise<Subscription | undefined> {\n    const subscription = Array.from(this.subscriptions.values()).find(\n      (sub) => sub.userId === userId\n    );\n    \n    if (subscription) {\n      subscription.monthlyGenerations = generationsUsed;\n      this.subscriptions.set(subscription.id, subscription);\n      return subscription;\n    }\n    return undefined;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":6656},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, json, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  company: text(\"company\"),\n  industry: text(\"industry\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const problemAnalyses = pgTable(\"problem_analyses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  problemDescription: text(\"problem_description\").notNull(),\n  industry: text(\"industry\").notNull(),\n  annualRevenue: text(\"annual_revenue\"),\n  currentCapacity: integer(\"current_capacity\"),\n  facilities: integer(\"facilities\"),\n  analysisResult: json(\"analysis_result\"),\n  status: text(\"status\").default(\"pending\"), // pending, analyzing, completed, failed\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const solutions = pgTable(\"solutions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  problemAnalysisId: varchar(\"problem_analysis_id\").references(() => problemAnalyses.id),\n  solutionType: text(\"solution_type\").notNull(), // pharmaceutical, electronics, paint, etc.\n  customAlgorithms: json(\"custom_algorithms\"),\n  dashboardComponents: json(\"dashboard_components\"),\n  implementationRoadmap: json(\"implementation_roadmap\"),\n  roiProjections: json(\"roi_projections\"),\n  expectedResults: json(\"expected_results\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const subscriptions = pgTable(\"subscriptions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  planType: text(\"plan_type\").notNull(), // basic, professional, enterprise\n  status: text(\"status\").default(\"active\"), // active, cancelled, expired\n  startDate: timestamp(\"start_date\").defaultNow(),\n  endDate: timestamp(\"end_date\"),\n  monthlyGenerations: integer(\"monthly_generations\").default(0),\n  maxGenerations: integer(\"max_generations\"),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProblemAnalysisSchema = createInsertSchema(problemAnalyses).omit({\n  id: true,\n  createdAt: true,\n  analysisResult: true,\n  status: true,\n});\n\nexport const insertSolutionSchema = createInsertSchema(solutions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSubscriptionSchema = createInsertSchema(subscriptions).omit({\n  id: true,\n  startDate: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertProblemAnalysis = z.infer<typeof insertProblemAnalysisSchema>;\nexport type ProblemAnalysis = typeof problemAnalyses.$inferSelect;\nexport type InsertSolution = z.infer<typeof insertSolutionSchema>;\nexport type Solution = typeof solutions.$inferSelect;\nexport type InsertSubscription = z.infer<typeof insertSubscriptionSchema>;\nexport type Subscription = typeof subscriptions.$inferSelect;\n","size_bytes":3311},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport Dashboard from \"@/pages/dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":798},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(222, 47%, 11%);\n  --card: hsl(210, 40%, 98%);\n  --card-foreground: hsl(222, 47%, 11%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 47%, 11%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(159, 73%, 31%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(220, 14%, 96%);\n  --muted-foreground: hsl(215, 25%, 27%);\n  --accent: hsl(24, 94%, 50%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(356, 90%, 54%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(220, 13%, 91%);\n  --input: hsl(220, 13%, 91%);\n  --ring: hsl(217, 91%, 60%);\n  --chart-1: hsl(217, 91%, 60%);\n  --chart-2: hsl(159, 73%, 31%);\n  --chart-3: hsl(24, 94%, 50%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --radius: 0.5rem;\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n\n  /* Custom brand colors */\n  --neutral-50: hsl(210, 20%, 98%);\n  --neutral-100: hsl(220, 14%, 96%);\n  --neutral-200: hsl(220, 13%, 91%);\n  --neutral-300: hsl(216, 12%, 84%);\n  --neutral-400: hsl(218, 11%, 65%);\n  --neutral-500: hsl(220, 9%, 46%);\n  --neutral-600: hsl(215, 14%, 34%);\n  --neutral-700: hsl(217, 19%, 27%);\n  --neutral-800: hsl(215, 28%, 17%);\n  --neutral-900: hsl(222, 47%, 11%);\n}\n\n.dark {\n  --background: hsl(222, 47%, 11%);\n  --foreground: hsl(213, 31%, 91%);\n  --card: hsl(217, 33%, 17%);\n  --card-foreground: hsl(213, 31%, 91%);\n  --popover: hsl(222, 47%, 11%);\n  --popover-foreground: hsl(213, 31%, 91%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(159, 73%, 31%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(215, 28%, 17%);\n  --muted-foreground: hsl(217, 19%, 65%);\n  --accent: hsl(24, 94%, 50%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(356, 90%, 54%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(215, 28%, 17%);\n  --input: hsl(215, 28%, 17%);\n  --ring: hsl(217, 91%, 60%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  \n  body {\n    @apply bg-background text-foreground font-sans;\n    font-feature-settings: \"rlig\" 1, \"calt\" 1;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    @apply font-semibold;\n  }\n}\n\n@layer utilities {\n  .text-gradient {\n    @apply bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent;\n  }\n  \n  .shadow-brand {\n    box-shadow: 0 4px 6px -1px rgba(59, 130, 246, 0.1), 0 2px 4px -1px rgba(59, 130, 246, 0.06);\n  }\n  \n  .border-gradient {\n    @apply border-transparent bg-gradient-to-r from-primary/20 to-secondary/20 bg-clip-border;\n  }\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 6px;\n}\n\n::-webkit-scrollbar-track {\n  @apply bg-neutral-100;\n}\n\n::-webkit-scrollbar-thumb {\n  @apply bg-neutral-300 rounded-full;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  @apply bg-neutral-400;\n}\n\n/* Smooth transitions for interactive elements */\na, button {\n  @apply transition-colors duration-200;\n}\n\n/* Custom focus styles */\n.focus-visible:focus-visible {\n  @apply outline-none ring-2 ring-primary ring-offset-2;\n}\n\n/* Animation classes */\n@keyframes fade-in {\n  from { opacity: 0; transform: translateY(10px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n.animate-fade-in {\n  animation: fade-in 0.3s ease-out;\n}\n\n@keyframes pulse-slow {\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0.5; }\n}\n\n.animate-pulse-slow {\n  animation: pulse-slow 2s infinite;\n}\n\n/* Custom component styles */\n.card-hover {\n  @apply transition-all duration-300 hover:shadow-lg hover:-translate-y-1;\n}\n\n.btn-gradient {\n  @apply bg-gradient-to-r from-primary to-secondary text-white font-medium;\n}\n\n.bg-pattern {\n  background-image: radial-gradient(circle at 1px 1px, rgba(59, 130, 246, 0.15) 1px, transparent 0);\n  background-size: 20px 20px;\n}\n","size_bytes":4041},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/footer.tsx":{"content":"import { Link } from \"wouter\";\n\nexport function Footer() {\n  const footerSections = [\n    {\n      title: \"Platform\",\n      links: [\n        { label: \"Features\", href: \"#platform\" },\n        { label: \"Industries\", href: \"#industries\" },\n        { label: \"API Documentation\", href: \"#api\" },\n        { label: \"Integration Guide\", href: \"#integration\" }\n      ]\n    },\n    {\n      title: \"Company\",\n      links: [\n        { label: \"About Hansei\", href: \"/about\" },\n        { label: \"Research\", href: \"/research\" },\n        { label: \"Careers\", href: \"/careers\" },\n        { label: \"Contact\", href: \"/contact\" }\n      ]\n    },\n    {\n      title: \"Support\",\n      links: [\n        { label: \"Help Center\", href: \"/help\" },\n        { label: \"Training\", href: \"/training\" },\n        { label: \"Community\", href: \"/community\" },\n        { label: \"Status\", href: \"/status\" }\n      ]\n    }\n  ];\n\n  const legalLinks = [\n    { label: \"Privacy Policy\", href: \"/privacy\" },\n    { label: \"Terms of Service\", href: \"/terms\" },\n    { label: \"Security\", href: \"/security\" }\n  ];\n\n  return (\n    <footer className=\"bg-neutral-900 text-white py-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid md:grid-cols-4 gap-8 mb-12\">\n          <div className=\"col-span-1\">\n            <Link href=\"/\" className=\"flex items-center space-x-2 mb-4\" data-testid=\"footer-logo\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <span className=\"text-white font-bold text-sm\">H</span>\n              </div>\n              <div>\n                <span className=\"text-lg font-bold\">DSB GENIUS</span>\n                <span className=\"text-xs text-neutral-400 block -mt-1\">Powered by Hansei Intelligence</span>\n              </div>\n            </Link>\n            <p className=\"text-neutral-400 text-sm mb-4\">\n              Revolutionary AI-powered manufacturing optimization platform transforming how businesses optimize their operations.\n            </p>\n            <div className=\"text-xs text-neutral-500\">\n              © 2024 Hansei Intelligence. All rights reserved.\n              <br />\n              Patent Pending • Trademark Applied\n            </div>\n          </div>\n\n          {footerSections.map((section, index) => (\n            <div key={index}>\n              <h4 className=\"font-semibold mb-4\" data-testid={`footer-section-${index}`}>\n                {section.title}\n              </h4>\n              <div className=\"space-y-2 text-sm text-neutral-400\">\n                {section.links.map((link, linkIndex) => (\n                  <a \n                    key={linkIndex}\n                    href={link.href} \n                    className=\"hover:text-white transition-colors block\"\n                    data-testid={`footer-link-${index}-${linkIndex}`}\n                  >\n                    {link.label}\n                  </a>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"border-t border-neutral-800 pt-8\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center\">\n            <div className=\"text-sm text-neutral-400 mb-4 md:mb-0\">\n              Hansei Intelligence • DSB GENIUS Platform • Manufacturing Optimization Leader\n            </div>\n            <div className=\"flex items-center space-x-6\">\n              {legalLinks.map((link, index) => (\n                <a \n                  key={index}\n                  href={link.href} \n                  className=\"text-neutral-400 hover:text-white transition-colors text-sm\"\n                  data-testid={`footer-legal-${index}`}\n                >\n                  {link.label}\n                </a>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":3838},"client/src/components/hero-section.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Zap } from \"lucide-react\";\n\nexport function HeroSection() {\n  const scrollToSection = (sectionId: string) => {\n    const element = document.getElementById(sectionId);\n    if (element) {\n      element.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  return (\n    <section className=\"bg-gradient-to-br from-primary/5 via-white to-secondary/5 pt-16 pb-24\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center max-w-4xl mx-auto\">\n          <div className=\"inline-flex items-center px-4 py-2 bg-primary/10 text-primary rounded-full text-sm font-medium mb-6\">\n            <Zap className=\"w-4 h-4 mr-2\" />\n            Revolutionary AI-Powered Manufacturing Optimization\n          </div>\n          \n          <h1 className=\"text-5xl md:text-6xl font-bold text-neutral-900 mb-6 leading-tight\">\n            Generate Custom \n            <span className=\"text-primary\"> DSB Solutions</span> \n            in 30 Minutes\n          </h1>\n          \n          <p className=\"text-xl text-neutral-600 mb-8 max-w-3xl mx-auto leading-relaxed\">\n            The world's first AI-powered platform that transforms manufacturing optimization from a 30-day consulting process into an instant, intelligent solution with real-time dashboards and continuous optimization.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-12\">\n            <Button \n              size=\"lg\" \n              className=\"px-8 py-4 bg-primary text-white hover:bg-primary/90 text-lg shadow-lg\"\n              onClick={() => scrollToSection('platform')}\n              data-testid=\"button-try-free\"\n            >\n              Try DSB GENIUS Free\n            </Button>\n            <Button \n              size=\"lg\" \n              variant=\"outline\" \n              className=\"px-8 py-4 text-lg\"\n              data-testid=\"button-watch-demo\"\n            >\n              Watch Demo\n            </Button>\n          </div>\n          \n          {/* Speed Comparison */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 max-w-4xl mx-auto\">\n            <div className=\"bg-white rounded-xl p-6 shadow-sm border border-neutral-200\">\n              <div className=\"text-3xl font-bold text-accent mb-2\" data-testid=\"text-time-30min\">30 Minutes</div>\n              <div className=\"text-sm text-neutral-600\">AI-Generated Solution</div>\n            </div>\n            <div className=\"bg-white rounded-xl p-6 shadow-sm border border-neutral-200\">\n              <div className=\"text-3xl font-bold text-secondary mb-2\" data-testid=\"text-roi-480\">480% ROI</div>\n              <div className=\"text-sm text-neutral-600\">Average First Year</div>\n            </div>\n            <div className=\"bg-white rounded-xl p-6 shadow-sm border border-neutral-200\">\n              <div className=\"text-3xl font-bold text-primary mb-2\" data-testid=\"text-cases-1000\">1000+</div>\n              <div className=\"text-sm text-neutral-600\">DSB Case Studies</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3124},"client/src/components/industry-examples.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { CheckCircle, Cpu, Palette, FlaskConical } from \"lucide-react\";\n\nexport function IndustryExamples() {\n  const industries = [\n    {\n      name: \"Electronics OEM\",\n      icon: Cpu,\n      color: \"blue\",\n      description: \"Specialized solutions for component lifecycle management, technology obsolescence, and multi-client production optimization.\",\n      features: [\n        \"Component Lifecycle Management\",\n        \"Technology Obsolescence Alerts\",\n        \"Quality Gate Performance\"\n      ],\n      metric: {\n        value: \"40% → 85%\",\n        label: \"Average Capacity Improvement\"\n      },\n      bgColor: \"from-blue-50 to-indigo-50\",\n      borderColor: \"border-blue-200\",\n      iconBg: \"bg-blue-100\",\n      iconColor: \"text-blue-600\",\n      metricColor: \"text-blue-600\"\n    },\n    {\n      name: \"Paint & Chemicals\",\n      icon: Palette,\n      color: \"green\",\n      description: \"Weather-integrated demand forecasting, color mixing optimization, and seasonal inventory management.\",\n      features: [\n        \"Seasonal Demand Prediction\",\n        \"Color Mixing Optimization\",\n        \"Weather API Integration\"\n      ],\n      metric: {\n        value: \"45%\",\n        label: \"Inventory Waste Reduction\"\n      },\n      bgColor: \"from-green-50 to-emerald-50\",\n      borderColor: \"border-green-200\",\n      iconBg: \"bg-green-100\",\n      iconColor: \"text-green-600\",\n      metricColor: \"text-green-600\"\n    },\n    {\n      name: \"Pharmaceutical CMO\",\n      icon: FlaskConical,\n      color: \"purple\",\n      description: \"Regulatory compliance tracking, technology transfer acceleration, and multi-client capacity optimization.\",\n      features: [\n        \"Regulatory Compliance Dashboard\",\n        \"Tech Transfer Acceleration\",\n        \"Multi-Client Balancing\"\n      ],\n      metric: {\n        value: \"6 → 2 months\",\n        label: \"Tech Transfer Timeline\"\n      },\n      bgColor: \"from-purple-50 to-violet-50\",\n      borderColor: \"border-purple-200\",\n      iconBg: \"bg-purple-100\",\n      iconColor: \"text-purple-600\",\n      metricColor: \"text-purple-600\"\n    }\n  ];\n\n  return (\n    <section id=\"industries\" className=\"py-24 bg-white\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-bold text-neutral-900 mb-4\">\n            Industry-Specific Solutions\n          </h2>\n          <p className=\"text-xl text-neutral-600 max-w-3xl mx-auto\">\n            Our AI adapts to different industries with specialized optimization algorithms and dashboards\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {industries.map((industry, index) => {\n            const IconComponent = industry.icon;\n            return (\n              <Card \n                key={index} \n                className={`bg-gradient-to-br ${industry.bgColor} ${industry.borderColor} hover:shadow-lg transition-shadow`}\n              >\n                <CardContent className=\"p-8\">\n                  <div className={`w-12 h-12 ${industry.iconBg} rounded-lg flex items-center justify-center mb-6`}>\n                    <IconComponent className={`w-6 h-6 ${industry.iconColor}`} />\n                  </div>\n                  \n                  <h3 className=\"text-xl font-bold text-neutral-900 mb-4\" data-testid={`text-industry-${index}`}>\n                    {industry.name}\n                  </h3>\n                  \n                  <p className=\"text-neutral-600 mb-6\">{industry.description}</p>\n                  \n                  <div className=\"space-y-3 mb-6\">\n                    {industry.features.map((feature, featureIndex) => (\n                      <div key={featureIndex} className=\"flex items-center text-sm\">\n                        <CheckCircle className={`w-4 h-4 ${industry.iconColor} mr-2`} />\n                        <span data-testid={`text-feature-${index}-${featureIndex}`}>{feature}</span>\n                      </div>\n                    ))}\n                  </div>\n\n                  <Card className={`bg-white ${industry.borderColor}`}>\n                    <CardContent className=\"p-4\">\n                      <div className={`text-2xl font-bold ${industry.metricColor} mb-1`} data-testid={`text-metric-${index}`}>\n                        {industry.metric.value}\n                      </div>\n                      <div className=\"text-sm text-neutral-600\">{industry.metric.label}</div>\n                    </CardContent>\n                  </Card>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4669},"client/src/components/navigation.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Menu } from \"lucide-react\";\n\nexport function Navigation() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const NavLinks = () => (\n    <>\n      <a \n        href=\"#platform\" \n        className=\"text-neutral-600 hover:text-primary transition-colors\"\n        data-testid=\"nav-platform\"\n      >\n        Platform\n      </a>\n      <a \n        href=\"#solutions\" \n        className=\"text-neutral-600 hover:text-primary transition-colors\"\n        data-testid=\"nav-solutions\"\n      >\n        Solutions\n      </a>\n      <a \n        href=\"#industries\" \n        className=\"text-neutral-600 hover:text-primary transition-colors\"\n        data-testid=\"nav-industries\"\n      >\n        Industries\n      </a>\n      <a \n        href=\"#pricing\" \n        className=\"text-neutral-600 hover:text-primary transition-colors\"\n        data-testid=\"nav-pricing\"\n      >\n        Pricing\n      </a>\n    </>\n  );\n\n  return (\n    <nav className=\"bg-white border-b border-neutral-200 sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <Link href=\"/\" className=\"flex items-center space-x-2\" data-testid=\"logo-link\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <span className=\"text-white font-bold text-sm\">H</span>\n              </div>\n              <div>\n                <span className=\"text-xl font-bold text-neutral-900\">DSB GENIUS</span>\n                <span className=\"text-xs text-neutral-500 block -mt-1\">Powered by Hansei Intelligence</span>\n              </div>\n            </div>\n          </Link>\n          \n          <div className=\"hidden md:flex items-center space-x-8\">\n            <NavLinks />\n          </div>\n          \n          <div className=\"hidden md:flex items-center space-x-3\">\n            <Link href=\"/dashboard\">\n              <Button \n                variant=\"ghost\" \n                className=\"text-primary hover:bg-primary/10\"\n                data-testid=\"button-signin\"\n              >\n                Sign In\n              </Button>\n            </Link>\n            <Link href=\"/dashboard\">\n              <Button \n                className=\"bg-primary text-white hover:bg-primary/90\"\n                data-testid=\"button-trial\"\n              >\n                Start Free Trial\n              </Button>\n            </Link>\n          </div>\n\n          {/* Mobile menu */}\n          <div className=\"md:hidden\">\n            <Sheet open={isOpen} onOpenChange={setIsOpen}>\n              <SheetTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-mobile-menu\">\n                  <Menu className=\"h-6 w-6\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"right\" className=\"w-[300px] sm:w-[400px]\">\n                <div className=\"flex flex-col space-y-6 mt-6\">\n                  <div className=\"flex flex-col space-y-4\">\n                    <NavLinks />\n                  </div>\n                  <div className=\"flex flex-col space-y-3\">\n                    <Link href=\"/dashboard\">\n                      <Button \n                        variant=\"outline\" \n                        className=\"w-full\"\n                        onClick={() => setIsOpen(false)}\n                        data-testid=\"button-mobile-signin\"\n                      >\n                        Sign In\n                      </Button>\n                    </Link>\n                    <Link href=\"/dashboard\">\n                      <Button \n                        className=\"w-full bg-primary text-white hover:bg-primary/90\"\n                        onClick={() => setIsOpen(false)}\n                        data-testid=\"button-mobile-trial\"\n                      >\n                        Start Free Trial\n                      </Button>\n                    </Link>\n                  </div>\n                </div>\n              </SheetContent>\n            </Sheet>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":4300},"client/src/components/pricing-section.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CheckCircle } from \"lucide-react\";\n\nexport function PricingSection() {\n  const plans = [\n    {\n      name: \"BASIC\",\n      price: \"₹2 Lakhs\",\n      period: \"per year\",\n      description: \"Perfect for small manufacturers getting started\",\n      features: [\n        \"Basic DSB solution generation\",\n        \"Standard dashboards\",\n        \"Email support\",\n        \"5 solution generations/month\"\n      ],\n      buttonText: \"Get Started\",\n      buttonVariant: \"outline\" as const,\n      testId: \"basic\"\n    },\n    {\n      name: \"PROFESSIONAL\",\n      price: \"₹8 Lakhs\",\n      period: \"per year\",\n      description: \"Most popular for growing businesses\",\n      popular: true,\n      features: [\n        \"Advanced AI-powered solutions\",\n        \"Custom industry dashboards\",\n        \"Priority phone support\",\n        \"Unlimited generations\",\n        \"API access\"\n      ],\n      buttonText: \"Start Free Trial\",\n      buttonVariant: \"default\" as const,\n      testId: \"professional\"\n    },\n    {\n      name: \"ENTERPRISE\",\n      price: \"₹25+ Lakhs\",\n      period: \"per year\",\n      description: \"Full-scale enterprise implementation\",\n      features: [\n        \"Full consulting integration\",\n        \"Dedicated account manager\",\n        \"Custom AI model training\",\n        \"On-site implementation\"\n      ],\n      buttonText: \"Contact Sales\",\n      buttonVariant: \"default\" as const,\n      testId: \"enterprise\"\n    }\n  ];\n\n  const guaranteeMetrics = [\n    { value: \"480%\", label: \"Average ROI\" },\n    { value: \"₹32 Cr\", label: \"Average Revenue Impact\" },\n    { value: \"30 minutes\", label: \"Solution Generation\" }\n  ];\n\n  return (\n    <section id=\"pricing\" className=\"py-24 bg-neutral-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-bold text-neutral-900 mb-4\">\n            Transparent Pricing\n          </h2>\n          <p className=\"text-xl text-neutral-600 max-w-3xl mx-auto\">\n            Revolutionary cost structure that scales with your business needs\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-3 gap-8 max-w-5xl mx-auto mb-16\">\n          {plans.map((plan, index) => (\n            <Card \n              key={index} \n              className={`relative hover:shadow-lg transition-shadow ${\n                plan.popular \n                  ? 'bg-primary text-white border-2 border-primary' \n                  : 'bg-white border border-neutral-200'\n              }`}\n            >\n              {plan.popular && (\n                <div className=\"absolute top-4 right-4\">\n                  <Badge className=\"bg-secondary text-white\">Most Popular</Badge>\n                </div>\n              )}\n              \n              <CardContent className=\"p-8\">\n                <div className=\"text-center mb-8\">\n                  <h3 className={`text-xl font-bold mb-2 ${plan.popular ? 'text-white' : 'text-neutral-900'}`}>\n                    {plan.name}\n                  </h3>\n                  <div className={`text-4xl font-bold mb-1 ${plan.popular ? 'text-white' : 'text-neutral-900'}`} data-testid={`text-price-${plan.testId}`}>\n                    {plan.price}\n                  </div>\n                  <div className={plan.popular ? 'opacity-90' : 'text-neutral-600'}>\n                    {plan.period}\n                  </div>\n                </div>\n\n                <div className=\"space-y-4 mb-8\">\n                  {plan.features.map((feature, featureIndex) => (\n                    <div key={featureIndex} className=\"flex items-center\">\n                      <CheckCircle className={`w-5 h-5 mr-3 ${plan.popular ? 'text-secondary' : 'text-secondary'}`} />\n                      <span className={plan.popular ? 'text-white' : 'text-neutral-700'} data-testid={`text-feature-${plan.testId}-${featureIndex}`}>\n                        {feature}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n\n                <Button \n                  variant={plan.popular ? \"secondary\" : plan.buttonVariant}\n                  className={`w-full ${\n                    plan.popular \n                      ? 'bg-white text-primary hover:bg-neutral-50' \n                      : plan.buttonVariant === 'outline' \n                        ? 'border-primary text-primary hover:bg-primary/10'\n                        : 'bg-accent text-white hover:bg-accent/90'\n                  }`}\n                  data-testid={`button-plan-${plan.testId}`}\n                >\n                  {plan.buttonText}\n                </Button>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* ROI Guarantee */}\n        <Card className=\"bg-gradient-to-r from-secondary/10 to-primary/10 border-secondary/20\">\n          <CardContent className=\"p-8 text-center\">\n            <h3 className=\"text-2xl font-bold text-neutral-900 mb-4\">ROI Guarantee</h3>\n            <p className=\"text-lg text-neutral-700 mb-6\">\n              We guarantee a minimum 300% ROI in the first year or your money back\n            </p>\n            <div className=\"flex flex-col sm:flex-row justify-center items-center gap-6\">\n              {guaranteeMetrics.map((metric, index) => (\n                <div key={index} className=\"text-center\">\n                  <div className={`text-3xl font-bold ${\n                    index === 0 ? 'text-secondary' : \n                    index === 1 ? 'text-primary' : 'text-accent'\n                  }`} data-testid={`text-guarantee-${index}`}>\n                    {metric.value}\n                  </div>\n                  <div className=\"text-sm text-neutral-600\">{metric.label}</div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5968},"client/src/components/problem-input.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { MessageSquare, ClipboardList, Upload, CheckCircle, Loader2 } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AnalysisResult {\n  problemCategories: string[];\n  rootCauses: string[];\n  severity: string;\n  keyIssues: Array<{ issue: string; impact: string; priority: number }>;\n}\n\nexport function ProblemInput() {\n  const [naturalLanguageInput, setNaturalLanguageInput] = useState(\"\");\n  const [industry, setIndustry] = useState(\"\");\n  const [revenue, setRevenue] = useState(\"\");\n  const [capacity, setCapacity] = useState(\"\");\n  const [facilities, setFacilities] = useState(\"\");\n  const [analysisResult, setAnalysisResult] = useState<AnalysisResult | null>(null);\n  const [analysisProgress, setAnalysisProgress] = useState(0);\n  \n  const { toast } = useToast();\n\n  const analyzeProblemMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest('POST', '/api/analyze-problem', data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      if (data.success) {\n        setAnalysisResult(data.result);\n        setAnalysisProgress(100);\n        toast({\n          title: \"Analysis Complete\",\n          description: \"Your manufacturing problem has been analyzed successfully.\",\n        });\n      } else {\n        throw new Error(data.error);\n      }\n    },\n    onError: (error) => {\n      toast({\n        title: \"Analysis Failed\",\n        description: error instanceof Error ? error.message : \"Failed to analyze problem\",\n        variant: \"destructive\",\n      });\n      setAnalysisProgress(0);\n    }\n  });\n\n  const handleNaturalLanguageAnalysis = () => {\n    if (!naturalLanguageInput.trim()) {\n      toast({\n        title: \"Input Required\",\n        description: \"Please describe your manufacturing challenge.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setAnalysisProgress(25);\n    \n    analyzeProblemMutation.mutate({\n      problemDescription: naturalLanguageInput,\n      industry: \"General Manufacturing\", // Default for natural language\n      userId: null // For demo purposes\n    });\n\n    // Simulate progress updates\n    setTimeout(() => setAnalysisProgress(50), 1000);\n    setTimeout(() => setAnalysisProgress(75), 2000);\n  };\n\n  const handleStructuredAnalysis = () => {\n    if (!industry || !naturalLanguageInput.trim()) {\n      toast({\n        title: \"Required Fields Missing\",\n        description: \"Please fill in the problem description and select an industry.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setAnalysisProgress(25);\n\n    analyzeProblemMutation.mutate({\n      problemDescription: naturalLanguageInput,\n      industry,\n      annualRevenue: revenue || null,\n      currentCapacity: capacity ? parseInt(capacity) : null,\n      facilities: facilities ? parseInt(facilities) : null,\n      userId: null // For demo purposes\n    });\n\n    // Simulate progress updates\n    setTimeout(() => setAnalysisProgress(50), 1000);\n    setTimeout(() => setAnalysisProgress(75), 2000);\n  };\n\n  return (\n    <section id=\"platform\" className=\"py-24 bg-white\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-bold text-neutral-900 mb-4\">\n            Input Your Manufacturing Challenge\n          </h2>\n          <p className=\"text-xl text-neutral-600 max-w-3xl mx-auto\">\n            Our AI understands your problems through multiple input methods and generates customized solutions instantly\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-12 items-start\">\n          {/* Input Methods */}\n          <div className=\"space-y-6\">\n            {/* Natural Language Input */}\n            <Card className=\"bg-neutral-50 border-neutral-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center mb-4\">\n                  <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center mr-3\">\n                    <MessageSquare className=\"w-5 h-5 text-primary\" />\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-neutral-900\">Natural Language Description</h3>\n                </div>\n                \n                <div className=\"mb-4\">\n                  <Label htmlFor=\"problem-description\" className=\"text-sm font-medium text-neutral-700 mb-2\">\n                    Describe your manufacturing challenge:\n                  </Label>\n                  <Textarea \n                    id=\"problem-description\"\n                    className=\"h-32 resize-none\"\n                    placeholder=\"Our pharma company has 40% capacity utilization, 6-month technology transfer times, and regulatory compliance issues...\"\n                    value={naturalLanguageInput}\n                    onChange={(e) => setNaturalLanguageInput(e.target.value)}\n                    data-testid=\"textarea-problem-description\"\n                  />\n                </div>\n                \n                <Button \n                  className=\"w-full bg-primary text-white hover:bg-primary/90\"\n                  onClick={handleNaturalLanguageAnalysis}\n                  disabled={analyzeProblemMutation.isPending}\n                  data-testid=\"button-analyze-natural\"\n                >\n                  {analyzeProblemMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Analyzing...\n                    </>\n                  ) : (\n                    \"Analyze with AI\"\n                  )}\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Structured Form Input */}\n            <Card className=\"bg-neutral-50 border-neutral-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center mb-4\">\n                  <div className=\"w-10 h-10 bg-secondary/10 rounded-lg flex items-center justify-center mr-3\">\n                    <ClipboardList className=\"w-5 h-5 text-secondary\" />\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-neutral-900\">Structured Parameters</h3>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                  <div>\n                    <Label htmlFor=\"industry-select\">Industry</Label>\n                    <Select onValueChange={setIndustry} data-testid=\"select-industry\">\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select industry\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"pharmaceutical\">Pharmaceutical</SelectItem>\n                        <SelectItem value=\"electronics\">Electronics OEM</SelectItem>\n                        <SelectItem value=\"paint\">Paint & Chemicals</SelectItem>\n                        <SelectItem value=\"automotive\">Automotive</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"revenue\">Annual Revenue</Label>\n                    <Select onValueChange={setRevenue} data-testid=\"select-revenue\">\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select range\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"₹100-500 Cr\">₹100-500 Cr</SelectItem>\n                        <SelectItem value=\"₹50-100 Cr\">₹50-100 Cr</SelectItem>\n                        <SelectItem value=\"₹500+ Cr\">₹500+ Cr</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                  <div>\n                    <Label htmlFor=\"capacity\">Current Capacity %</Label>\n                    <Input \n                      id=\"capacity\"\n                      type=\"number\" \n                      placeholder=\"40\" \n                      value={capacity}\n                      onChange={(e) => setCapacity(e.target.value)}\n                      data-testid=\"input-capacity\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"facilities\">Facilities</Label>\n                    <Input \n                      id=\"facilities\"\n                      type=\"number\" \n                      placeholder=\"2\" \n                      value={facilities}\n                      onChange={(e) => setFacilities(e.target.value)}\n                      data-testid=\"input-facilities\"\n                    />\n                  </div>\n                </div>\n\n                <Button \n                  className=\"w-full bg-secondary text-white hover:bg-secondary/90\"\n                  onClick={handleStructuredAnalysis}\n                  disabled={analyzeProblemMutation.isPending}\n                  data-testid=\"button-analyze-structured\"\n                >\n                  {analyzeProblemMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Generating...\n                    </>\n                  ) : (\n                    \"Generate Solution\"\n                  )}\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Document Upload */}\n            <Card className=\"bg-neutral-50 border-neutral-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center mb-4\">\n                  <div className=\"w-10 h-10 bg-accent/10 rounded-lg flex items-center justify-center mr-3\">\n                    <Upload className=\"w-5 h-5 text-accent\" />\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-neutral-900\">Document Analysis</h3>\n                </div>\n\n                <div className=\"border-2 border-dashed border-neutral-300 rounded-lg p-8 text-center mb-4\">\n                  <Upload className=\"w-12 h-12 text-neutral-400 mx-auto mb-4\" />\n                  <p className=\"text-neutral-600\">Upload annual reports, production data, or financial statements</p>\n                  <p className=\"text-sm text-neutral-500 mt-2\">PDF, Excel, CSV files supported</p>\n                </div>\n\n                <Button \n                  className=\"w-full bg-accent text-white hover:bg-accent/90\"\n                  data-testid=\"button-upload-analyze\"\n                >\n                  Upload & Analyze\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* AI Analysis Visualization */}\n          <div className=\"bg-gradient-to-br from-primary/5 to-secondary/5 rounded-xl p-8 border border-neutral-200\">\n            <h3 className=\"text-2xl font-bold text-neutral-900 mb-6\">AI Analysis in Progress</h3>\n            \n            {/* Analysis Steps */}\n            <div className=\"space-y-4 mb-8\">\n              <div className=\"flex items-center\">\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center mr-3 ${\n                  analysisProgress >= 25 ? 'bg-secondary' : 'bg-neutral-300'\n                }`}>\n                  {analysisProgress >= 25 ? (\n                    <CheckCircle className=\"w-4 h-4 text-white\" />\n                  ) : (\n                    <div className=\"w-3 h-3 bg-white rounded-full\"></div>\n                  )}\n                </div>\n                <span className=\"text-neutral-700\">Problem categorization complete</span>\n              </div>\n              \n              <div className=\"flex items-center\">\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center mr-3 ${\n                  analysisProgress >= 50 ? 'bg-secondary' : analysisProgress >= 25 ? 'bg-primary animate-pulse' : 'bg-neutral-300'\n                }`}>\n                  {analysisProgress >= 50 ? (\n                    <CheckCircle className=\"w-4 h-4 text-white\" />\n                  ) : (\n                    <div className=\"w-3 h-3 bg-white rounded-full\"></div>\n                  )}\n                </div>\n                <span className=\"text-neutral-700\">Industry pattern recognition</span>\n              </div>\n              \n              <div className=\"flex items-center\">\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center mr-3 ${\n                  analysisProgress >= 75 ? 'bg-secondary' : analysisProgress >= 50 ? 'bg-primary animate-pulse' : 'bg-neutral-300'\n                }`}>\n                  {analysisProgress >= 75 ? (\n                    <CheckCircle className=\"w-4 h-4 text-white\" />\n                  ) : (\n                    <div className=\"w-3 h-3 bg-white rounded-full\"></div>\n                  )}\n                </div>\n                <span className=\"text-neutral-700\">Matching optimal DSB solutions...</span>\n              </div>\n              \n              <div className=\"flex items-center\">\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center mr-3 ${\n                  analysisProgress >= 100 ? 'bg-secondary' : analysisProgress >= 75 ? 'bg-primary animate-pulse' : 'bg-neutral-300'\n                }`}>\n                  {analysisProgress >= 100 ? (\n                    <CheckCircle className=\"w-4 h-4 text-white\" />\n                  ) : (\n                    <div className=\"w-3 h-3 bg-white rounded-full\"></div>\n                  )}\n                </div>\n                <span className={analysisProgress >= 100 ? \"text-neutral-700\" : \"text-neutral-500\"}>\n                  Generating custom dashboard\n                </span>\n              </div>\n            </div>\n\n            {/* Identified Problems */}\n            {analysisResult && (\n              <Card className=\"bg-white border-neutral-200 mb-6\">\n                <CardContent className=\"p-6\">\n                  <h4 className=\"font-semibold text-neutral-900 mb-3\">Identified Key Issues:</h4>\n                  <div className=\"space-y-2\">\n                    {analysisResult.keyIssues.slice(0, 3).map((issue, index) => (\n                      <div key={index} className=\"flex items-center text-sm\">\n                        <div className={`w-2 h-2 rounded-full mr-3 ${\n                          issue.impact === 'high' ? 'bg-red-500' : \n                          issue.impact === 'medium' ? 'bg-amber-500' : 'bg-green-500'\n                        }`}></div>\n                        <span data-testid={`text-issue-${index}`}>{issue.issue}</span>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Progress Bar */}\n            <div className=\"bg-neutral-200 rounded-full h-2 mb-2\">\n              <div \n                className=\"bg-primary h-2 rounded-full transition-all duration-1000\"\n                style={{ width: `${analysisProgress}%` }}\n              ></div>\n            </div>\n            <p className=\"text-sm text-neutral-600\" data-testid=\"text-analysis-progress\">\n              {analysisProgress === 100 ? \"Analysis complete!\" : \n               analyzeProblemMutation.isPending ? `Analysis ${analysisProgress}% complete - processing...` :\n               \"Ready to analyze your manufacturing challenge\"}\n            </p>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":15985},"client/src/components/solution-showcase.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { BarChart3, Clock, CheckCircle, Zap, TrendingUp, Shield } from \"lucide-react\";\n\nexport function SolutionShowcase() {\n  const [activeTab, setActiveTab] = useState(\"pharma\");\n\n  const solutionExamples = {\n    pharma: {\n      title: \"Pharmaceutical CMO Optimization Solution\",\n      subtitle: \"Generated in 27 seconds • Industry: Pharmaceutical Contract Manufacturing\",\n      revenue: \"₹150 Cr\",\n      metrics: {\n        capacityImprovement: \"40% → 85%\",\n        additionalRevenue: \"₹32 Cr\",\n        costReduction: \"₹8 Cr\",\n        roi: \"480%\"\n      },\n      dashboardComponents: [\n        { name: \"Multi-Client Capacity View\", description: \"Real-time capacity allocation across clients\", icon: BarChart3, color: \"primary\" },\n        { name: \"Tech Transfer Accelerator\", description: \"Automated timeline optimization\", icon: Clock, color: \"secondary\" },\n        { name: \"Compliance Dashboard\", description: \"Regulatory tracking and alerts\", icon: Shield, color: \"accent\" },\n        { name: \"Production Balancer\", description: \"Dynamic resource allocation\", icon: Zap, color: \"primary\" },\n        { name: \"Quality Gate Tracker\", description: \"Quality metrics monitoring\", icon: CheckCircle, color: \"secondary\" },\n        { name: \"Risk Assessment Matrix\", description: \"Supplier and operational risks\", icon: TrendingUp, color: \"accent\" }\n      ],\n      roadmap: [\n        { phase: \"Week 1-2: System Integration & Data Setup\", description: \"Configure APIs, import historical data, establish baselines\", step: 1 },\n        { phase: \"Week 3-6: Algorithm Calibration & Testing\", description: \"Fine-tune algorithms, validate predictions, pilot testing\", step: 2 },\n        { phase: \"Week 7-10: Team Training & Go-Live\", description: \"User training, full deployment, initial optimization\", step: 3 },\n        { phase: \"Ongoing: Continuous Optimization\", description: \"AI learning, performance enhancement, new optimizations\", step: \"∞\" }\n      ]\n    }\n  };\n\n  const currentSolution = solutionExamples[activeTab as keyof typeof solutionExamples];\n\n  const dashboardMetrics = [\n    { label: \"Capacity Utilization\", value: \"67%\", change: \"+27% this month\", icon: TrendingUp, color: \"secondary\" },\n    { label: \"Revenue Impact\", value: \"₹18.2 Cr\", change: \"YTD additional\", icon: BarChart3, color: \"primary\" },\n    { label: \"Cost Savings\", value: \"₹4.7 Cr\", change: \"Operational savings\", icon: CheckCircle, color: \"accent\" },\n    { label: \"Efficiency Score\", value: \"94/100\", change: \"Outstanding\", icon: Zap, color: \"purple\" }\n  ];\n\n  return (\n    <section id=\"solutions\" className=\"py-24 bg-neutral-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-bold text-neutral-900 mb-4\">\n            AI-Generated Solutions & Dashboards\n          </h2>\n          <p className=\"text-xl text-neutral-600 max-w-3xl mx-auto\">\n            Watch as our AI creates comprehensive solutions tailored to your industry and challenges\n          </p>\n        </div>\n\n        {/* Solution Output Example */}\n        <Card className=\"shadow-lg border-neutral-200 overflow-hidden mb-12\">\n          <div className=\"bg-gradient-to-r from-primary to-secondary p-6 text-white\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h3 className=\"text-2xl font-bold mb-2\" data-testid=\"text-solution-title\">\n                  {currentSolution.title}\n                </h3>\n                <p className=\"opacity-90\">{currentSolution.subtitle}</p>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-3xl font-bold\" data-testid=\"text-solution-revenue\">\n                  {currentSolution.revenue}\n                </div>\n                <div className=\"text-sm opacity-90\">Annual Revenue</div>\n              </div>\n            </div>\n          </div>\n\n          <CardContent className=\"p-8\">\n            {/* Key Metrics */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6 mb-8\">\n              {Object.entries(currentSolution.metrics).map(([key, value], index) => (\n                <div key={key} className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-secondary mb-1\" data-testid={`text-metric-${key}`}>\n                    {value}\n                  </div>\n                  <div className=\"text-sm text-neutral-600 capitalize\">\n                    {key.replace(/([A-Z])/g, ' $1').trim()}\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {/* Generated Dashboard Components */}\n            <div className=\"mb-8\">\n              <h4 className=\"text-xl font-bold text-neutral-900 mb-4\">Generated Dashboard Components:</h4>\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {currentSolution.dashboardComponents.map((component, index) => {\n                  const IconComponent = component.icon;\n                  return (\n                    <Card key={index} className=\"bg-neutral-50 border-neutral-200\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center mb-2\">\n                          <div className={`w-8 h-8 bg-${component.color}/10 rounded-lg flex items-center justify-center mr-3`}>\n                            <IconComponent className={`w-4 h-4 text-${component.color}`} />\n                          </div>\n                          <span className=\"font-medium text-neutral-900\" data-testid={`text-component-${index}`}>\n                            {component.name}\n                          </span>\n                        </div>\n                        <p className=\"text-sm text-neutral-600\">{component.description}</p>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            </div>\n\n            {/* Implementation Roadmap */}\n            <div className=\"mb-8\">\n              <h4 className=\"text-xl font-bold text-neutral-900 mb-4\">Implementation Roadmap:</h4>\n              <div className=\"relative\">\n                {/* Timeline line */}\n                <div className=\"absolute left-4 top-8 bottom-0 w-0.5 bg-neutral-300\"></div>\n                \n                <div className=\"space-y-6\">\n                  {currentSolution.roadmap.map((phase, index) => (\n                    <div key={index} className=\"flex items-start\">\n                      <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white font-bold text-sm mr-4 relative z-10 ${\n                        index === 0 ? 'bg-primary' : \n                        index === 1 ? 'bg-secondary' : \n                        index === 2 ? 'bg-accent' : 'bg-primary'\n                      }`}>\n                        {phase.step}\n                      </div>\n                      <div className=\"flex-1\">\n                        <h5 className=\"font-semibold text-neutral-900\" data-testid={`text-roadmap-${index}`}>\n                          {phase.phase}\n                        </h5>\n                        <p className=\"text-sm text-neutral-600\">{phase.description}</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <Button \n                className=\"flex-1 bg-primary text-white hover:bg-primary/90\"\n                data-testid=\"button-download-solution\"\n              >\n                Download Complete Solution\n              </Button>\n              <Button \n                variant=\"outline\" \n                className=\"flex-1 border-primary text-primary hover:bg-primary/10\"\n                data-testid=\"button-schedule-call\"\n              >\n                Schedule Implementation Call\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Live Dashboard Preview */}\n        <Card className=\"shadow-lg border-neutral-200 overflow-hidden\">\n          <div className=\"bg-neutral-900 p-6 text-white\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-xl font-bold\">Live Dashboard Preview</h3>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-secondary rounded-full animate-pulse\"></div>\n                <span className=\"text-sm\">Real-time Updates</span>\n              </div>\n            </div>\n          </div>\n\n          <CardContent className=\"p-8\">\n            {/* KPI Cards */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6 mb-8\">\n              {dashboardMetrics.map((metric, index) => {\n                const IconComponent = metric.icon;\n                return (\n                  <Card key={index} className={`bg-gradient-to-br from-${metric.color}/10 to-${metric.color}/5 border-${metric.color}/20`}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm font-medium text-neutral-700\">{metric.label}</span>\n                        <IconComponent className={`w-4 h-4 text-${metric.color}`} />\n                      </div>\n                      <div className=\"text-2xl font-bold text-neutral-900\" data-testid={`text-dashboard-${index}`}>\n                        {metric.value}\n                      </div>\n                      <div className={`text-sm text-${metric.color}`}>{metric.change}</div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n\n            {/* Chart Placeholder */}\n            <Card className=\"bg-neutral-50 border-neutral-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h4 className=\"font-semibold text-neutral-900\">Capacity Utilization Trend</h4>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"flex items-center\">\n                      <div className=\"w-3 h-3 bg-primary rounded-full mr-2\"></div>\n                      <span className=\"text-sm text-neutral-600\">Actual</span>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <div className=\"w-3 h-3 bg-secondary rounded-full mr-2\"></div>\n                      <span className=\"text-sm text-neutral-600\">Optimized</span>\n                    </div>\n                  </div>\n                </div>\n                {/* Simulated Chart */}\n                <div \n                  className=\"h-64 bg-white rounded border border-neutral-200 flex items-end justify-between p-4\"\n                  style={{\n                    backgroundImage: \"linear-gradient(to top, #f1f5f9 0%, #f1f5f9 40%, transparent 40%, transparent 60%, #e2e8f0 60%, #e2e8f0 100%)\"\n                  }}\n                  data-testid=\"chart-capacity-trend\"\n                >\n                  <div className=\"flex items-end space-x-2 w-full\">\n                    {[60, 65, 70, 75, 80, 85, 87, 89, 91, 93].map((height, index) => (\n                      <div \n                        key={index}\n                        className={`rounded-t ${index < 5 ? 'bg-primary/40' : 'bg-secondary/80'}`}\n                        style={{ height: `${height}%`, width: '8%' }}\n                      ></div>\n                    ))}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </CardContent>\n        </Card>\n      </div>\n    </section>\n  );\n}\n","size_bytes":11929},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { BarChart3, TrendingUp, Zap, CheckCircle, AlertCircle, Clock, Users } from \"lucide-react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Dashboard() {\n  const [problemDescription, setProblemDescription] = useState(\"\");\n  const [industry, setIndustry] = useState(\"\");\n  const [currentUser] = useState({ id: \"demo-user\", name: \"Demo User\" }); // Demo user\n  const { toast } = useToast();\n\n  // Fetch user's analyses\n  const { data: analyses, refetch: refetchAnalyses } = useQuery({\n    queryKey: [\"/api/user\", currentUser.id, \"analyses\"],\n    enabled: !!currentUser.id,\n  });\n\n  // Fetch user's solutions\n  const { data: solutions } = useQuery({\n    queryKey: [\"/api/user\", currentUser.id, \"solutions\"],\n    enabled: !!currentUser.id,\n  });\n\n  // Generate new analysis\n  const generateAnalysisMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest('POST', '/api/analyze-problem', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Analysis Started\",\n        description: \"Your manufacturing problem is being analyzed.\",\n      });\n      refetchAnalyses();\n      setProblemDescription(\"\");\n      setIndustry(\"\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Analysis Failed\",\n        description: error instanceof Error ? error.message : \"Failed to start analysis\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleGenerateAnalysis = () => {\n    if (!problemDescription.trim() || !industry) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please provide problem description and select an industry.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    generateAnalysisMutation.mutate({\n      problemDescription,\n      industry,\n      userId: currentUser.id\n    });\n  };\n\n  // Mock dashboard metrics for demonstration\n  const dashboardMetrics = [\n    { \n      title: \"Active Solutions\", \n      value: (solutions as any)?.solutions?.length || 0, \n      icon: Zap, \n      color: \"text-primary\",\n      change: \"+2 this month\" \n    },\n    { \n      title: \"Total Analyses\", \n      value: (analyses as any)?.analyses?.length || 0, \n      icon: BarChart3, \n      color: \"text-secondary\",\n      change: \"+5 this week\" \n    },\n    { \n      title: \"Average ROI\", \n      value: \"385%\", \n      icon: TrendingUp, \n      color: \"text-accent\",\n      change: \"Industry leading\" \n    },\n    { \n      title: \"Implementation Time\", \n      value: \"8 weeks\", \n      icon: Clock, \n      color: \"text-purple-600\",\n      change: \"50% faster\" \n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-neutral-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-neutral-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                  <span className=\"text-white font-bold text-sm\">H</span>\n                </div>\n                <div>\n                  <span className=\"text-xl font-bold text-neutral-900\">DSB GENIUS</span>\n                  <span className=\"text-xs text-neutral-500 block -mt-1\">Dashboard</span>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Users className=\"w-4 h-4 text-neutral-500\" />\n                <span className=\"text-sm text-neutral-700\" data-testid=\"text-user-name\">{currentUser.name}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Dashboard Metrics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          {dashboardMetrics.map((metric, index) => {\n            const IconComponent = metric.icon;\n            return (\n              <Card key={index}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-neutral-600\">{metric.title}</p>\n                      <p className=\"text-2xl font-bold text-neutral-900\" data-testid={`text-metric-${index}`}>\n                        {metric.value}\n                      </p>\n                      <p className=\"text-xs text-neutral-500\">{metric.change}</p>\n                    </div>\n                    <IconComponent className={`w-8 h-8 ${metric.color}`} />\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        <Tabs defaultValue=\"new-analysis\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"new-analysis\" data-testid=\"tab-new-analysis\">New Analysis</TabsTrigger>\n            <TabsTrigger value=\"my-solutions\" data-testid=\"tab-solutions\">My Solutions</TabsTrigger>\n            <TabsTrigger value=\"history\" data-testid=\"tab-history\">History</TabsTrigger>\n          </TabsList>\n\n          {/* New Analysis Tab */}\n          <TabsContent value=\"new-analysis\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Generate New DSB Solution</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"problem-desc\">Problem Description</Label>\n                  <Textarea\n                    id=\"problem-desc\"\n                    placeholder=\"Describe your manufacturing challenge in detail...\"\n                    value={problemDescription}\n                    onChange={(e) => setProblemDescription(e.target.value)}\n                    className=\"h-32\"\n                    data-testid=\"textarea-problem-desc\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"industry-select\">Industry</Label>\n                    <Select onValueChange={setIndustry} data-testid=\"select-industry-dashboard\">\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select your industry\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"pharmaceutical\">Pharmaceutical</SelectItem>\n                        <SelectItem value=\"electronics\">Electronics OEM</SelectItem>\n                        <SelectItem value=\"paint\">Paint & Chemicals</SelectItem>\n                        <SelectItem value=\"automotive\">Automotive</SelectItem>\n                        <SelectItem value=\"textile\">Textile</SelectItem>\n                        <SelectItem value=\"food\">Food Processing</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <Button \n                  onClick={handleGenerateAnalysis}\n                  disabled={generateAnalysisMutation.isPending}\n                  className=\"w-full bg-primary hover:bg-primary/90\"\n                  data-testid=\"button-generate-analysis\"\n                >\n                  {generateAnalysisMutation.isPending ? \"Generating Analysis...\" : \"Generate DSB Solution\"}\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Solutions Tab */}\n          <TabsContent value=\"my-solutions\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Your DSB Solutions</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {(solutions as any)?.solutions?.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {(solutions as any).solutions.map((solution: any, index: number) => (\n                      <Card key={solution.id} className=\"border-neutral-200\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <h4 className=\"font-semibold text-neutral-900\" data-testid={`text-solution-${index}`}>\n                                {solution.solutionType || \"Manufacturing Optimization Solution\"}\n                              </h4>\n                              <p className=\"text-sm text-neutral-600\">\n                                Created: {new Date(solution.createdAt).toLocaleDateString()}\n                              </p>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <Badge variant=\"secondary\">Active</Badge>\n                              <Button size=\"sm\" variant=\"outline\" data-testid={`button-view-${index}`}>\n                                View Details\n                              </Button>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Zap className=\"w-12 h-12 text-neutral-400 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold text-neutral-900 mb-2\">No Solutions Yet</h3>\n                    <p className=\"text-neutral-600 mb-4\">Generate your first DSB solution to get started.</p>\n                    <Button onClick={() => (document.querySelector('[data-testid=\"tab-new-analysis\"]') as HTMLElement)?.click()}>\n                      Create Solution\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* History Tab */}\n          <TabsContent value=\"history\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Analysis History</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {(analyses as any)?.analyses?.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {(analyses as any).analyses.map((analysis: any, index: number) => (\n                      <Card key={analysis.id} className=\"border-neutral-200\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center space-x-2 mb-2\">\n                                <Badge \n                                  variant={\n                                    analysis.status === 'completed' ? 'default' : \n                                    analysis.status === 'analyzing' ? 'secondary' : \n                                    analysis.status === 'failed' ? 'destructive' : 'outline'\n                                  }\n                                >\n                                  {analysis.status}\n                                </Badge>\n                                <span className=\"text-sm text-neutral-500\">{analysis.industry}</span>\n                              </div>\n                              <p className=\"text-sm text-neutral-900 mb-1\" data-testid={`text-analysis-${index}`}>\n                                {analysis.problemDescription.substring(0, 100)}...\n                              </p>\n                              <p className=\"text-xs text-neutral-500\">\n                                {new Date(analysis.createdAt).toLocaleDateString()}\n                              </p>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              {analysis.status === 'completed' && (\n                                <CheckCircle className=\"w-5 h-5 text-secondary\" />\n                              )}\n                              {analysis.status === 'analyzing' && (\n                                <Clock className=\"w-5 h-5 text-primary animate-pulse\" />\n                              )}\n                              {analysis.status === 'failed' && (\n                                <AlertCircle className=\"w-5 h-5 text-destructive\" />\n                              )}\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <BarChart3 className=\"w-12 h-12 text-neutral-400 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold text-neutral-900 mb-2\">No Analysis History</h3>\n                    <p className=\"text-neutral-600\">Your analysis history will appear here once you start generating solutions.</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14020},"client/src/pages/home.tsx":{"content":"import { Navigation } from \"@/components/navigation\";\nimport { HeroSection } from \"@/components/hero-section\";\nimport { ProblemInput } from \"@/components/problem-input\";\nimport { SolutionShowcase } from \"@/components/solution-showcase\";\nimport { IndustryExamples } from \"@/components/industry-examples\";\nimport { PricingSection } from \"@/components/pricing-section\";\nimport { Footer } from \"@/components/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { CheckCircle } from \"lucide-react\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      <HeroSection />\n      <ProblemInput />\n      <SolutionShowcase />\n      <IndustryExamples />\n      <PricingSection />\n      \n      {/* Call to Action Section */}\n      <section className=\"py-24 bg-gradient-to-br from-primary via-primary to-secondary text-white\">\n        <div className=\"max-w-4xl mx-auto text-center px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-6\">\n            Ready to Transform Your Manufacturing?\n          </h2>\n          <p className=\"text-xl opacity-90 mb-8 max-w-3xl mx-auto\">\n            Join the manufacturing revolution. Generate your first custom DSB solution in the next 30 minutes and see the difference AI-powered optimization can make.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-12\">\n            <Button \n              size=\"lg\"\n              className=\"px-8 py-4 bg-white text-primary hover:bg-neutral-50 text-lg shadow-lg\"\n              data-testid=\"button-cta-trial\"\n            >\n              Start Free Trial\n            </Button>\n            <Button \n              size=\"lg\"\n              variant=\"outline\" \n              className=\"px-8 py-4 border-2 border-white text-white hover:bg-white/10 text-lg\"\n              data-testid=\"button-cta-demo\"\n            >\n              Schedule Demo\n            </Button>\n          </div>\n\n          <div className=\"flex flex-col sm:flex-row justify-center items-center gap-8 text-sm opacity-90\">\n            <div className=\"flex items-center\">\n              <CheckCircle className=\"w-5 h-5 mr-2\" />\n              No credit card required\n            </div>\n            <div className=\"flex items-center\">\n              <CheckCircle className=\"w-5 h-5 mr-2\" />\n              30-day money-back guarantee\n            </div>\n            <div className=\"flex items-center\">\n              <CheckCircle className=\"w-5 h-5 mr-2\" />\n              Setup in under 24 hours\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":2667},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}